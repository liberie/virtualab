#! /bin/sh

# Script criado para automatizazao de processo de rotinas de gerenciamento 
# de usuários de Maquinas Virtuais XEN do projeto HackerTeen da 4Linux/IBM.
# Por Marco Sinhoreli <msinhore@gmail.com>
# Em 29/06/2005


# Variaveis de ambiente

SESSION=$RANDOM
ADM="logistica@4linux.com.br"

XEN_CONF=/etc/xen/conffiles
XEN_VBD=/dev/xen

alias DIALOG="dialog --title \"Gerenciamento XEN\" --stdout"

#  Menu principal da Ferramenta

menu(){
    
    OPT=$(DIALOG \
	--help-button \
	--ok-label "Selecionar" \
	--cancel-label "Sair" \
	--menu "Escolha uma opção:" 0 0 0 \
	1 "Gerenciamento de usuários e Maquinas Virtuais" \
	2 "Adicionar Usuário/Maquina Virtual" \
	3 "Reinstalar Maquina Virtual com problemas" \
	4 "Remover Maquina Virtual e usuário" \
	5 "Ver status do sistema" )
    
    case $? in
	1|255) exit 0 ;;
	2) 
	    case $OPT in
		"HELP 1")
		    DIALOG \
			--ok-label "Menu" \
			--backtitle "Gerenciamento de usuários e Maquinas Virtuais" \
			--msgbox "
Visualize e altere as configuracoes dos usuarios como:
  - Nome
  - e-mail
  - Turma
  - Intervalo/Horas/dias da semana de uso de Maquinas Virtuais
  - Status do perfil
  - Log de acesso
" 20 70;;
		"HELP 2")
		    DIALOG \
			--ok-label "Menu" \
			--backtitle "Adicionar Usuário/Maquina Virtual" \
			--msgbox "
Adiciona um novo usuario e uma nova Maquina Virtual.
" 20 70;;
		
		"HELP 3")
		    DIALOG \
			--ok-label "Menu" \
			--backtitle "Reinstalar Maquina Virtual com problemas" \
			--msgbox "
Reinstala Maquina Virtual em mau funcionamento por motivos
de uso.
" 20 70;;
		
		"HELP 4")
		    DIALOG \
			--ok-label "Menu" \
			--backtitle "Remover Maquina Virtual e usuário" \
			--msgbox "
Remove Maquina Virtual e usuario a ela relacionado.
" 20 70;;
		
		"HELP 5")
		    DIALOG \
			--ok-label "Menu" \
			--backtitle "Ver status do sistema" \
			--msgbox "
Visualiza todos os dados relativos ao sistema de Maquinas Virtuais:
  - Total de Maquinas Virtuais on-line
  - Capacidade do Linux Volume Manager
  - Recursos disponiveis de hardware
  - log do sistema
" 20 70;;
	    esac
	    menu ;;
    esac
    
    case $OPT in
	1) 
	    gerenciamento
	    ;;
	2) 
	    create_xen
	    ;;
	3) 
	    list_concerta
	    ;;
	4) 
	    list_remove
	    ;;
	5) 
	    status_menu
	    ;;
    esac
}

# Área de Gerenciamento de usuários (lista)

gerenciamento() {
    
    list=
    
    for i in $(cat /etc/passwd | grep xensh | sed 's/,/:/g' | cut -d":" -f1,8 | sort)
      do
      value=($(echo $i | sed 's/:/ /'))
      list="$list ${value[1]} ${value[0]}"
    done
    
# Exibindo menu com a lista
    VER_VM=$(DIALOG \
	--cancel-label "Menu" \
	--menu "Selecione um usuário para visualização:" 0 0 0 \
	$list)
    
    case $? in
        0) visualiza
	    ;;
        1) menu
	    ;;
        255) exit 0
	    ;;
    esac
}

# Área de visualização/alteração de usuário expecifico
visualiza(){
    NOME=$(cat /etc/passwd | grep ",$VER_VM," | sed 's/,/:/g' | cut -d: -f 5)
    
    DATA_USR=($(cat /etc/passwd | grep ",$VER_VM," | sed 's/,/:/g;s/|/:/g'| cut -d: -f 1,6-8,11-16 | sed 's/:/ /g'))
    USR=${DATA_USR[0]}
    TURMA=${DATA_USR[1]}
    MAIL=${DATA_USR[2]}
    VM_FILE=${DATA_USR[3]}
    DT_INI=${DATA_USR[4]}
    DT_TER=${DATA_USR[5]}
    DT_ACE=${DATA_USR[6]}
    HR_INI=${DATA_USR[7]}
    HR_TER=${DATA_USR[8]}
    VM_STAT=$( [ ${DATA_USR[9]} -eq 0 ] && echo Ativa || echo Desativa)
    VM_LINE=$(xm list $VER_VM 2>/dev/null | grep $VER_VM | wc -l)

    OPT_ALT=$(DIALOG --cancel-label "Menu" \
	--help-button \
	--help-label "Lista" \
	--menu "Informações do usuário $USR VM $VER_VM:" 0 0 0 \
	1 "Nome: $NOME" \
	2 "Turma: $TURMA" \
	3 "VM: $VER_VM" \
	4 "Data de Início: $DT_INI" \
	5 "Data de Termino: $DT_TER" \
	6 "Dias de acesso: $DT_ACE" \
	7 "Hora inicio: $HR_INI:00 Hs" \
	8  "Hora termino: $HR_TER:00 Hs" \
	9 "Status VM: $VM_STAT" \
	10 "Maquina Virtual: $( [ $VM_LINE -eq 1 ] && echo On-line || echo Off-line)")

    case $? in
        1) menu 
	    ;;
	2) gerenciamento
	    ;;
    esac

    cancela()
    {
	case $? in
	    1)
            visualiza
	    ;;
       esac
    }
    case $OPT_ALT in
        1)
	    NOME=$(DIALOG \
		--inputbox "Entre com o novo nome para o usuário:" 0 0 \
		"$NOME")
	    cancela
	    
	    chfn $USR -f "$NOME"
	    visualiza
	    ;;
        2)
	    TURMA=$(DIALOG \
		--inputbox "Entre com a nova turma para o usuário:" 0 0 \
		"$TURMA")
	    cancela	    
	    chfn $USR -r "$TURMA"
	    visualiza
	    ;;
        3)
	    DIALOG \
		--msgbox "A Maquina Virtual nao eh editavel." 0 0
	    visualiza
	    ;;
        4)
	    DIA=$(echo $DT_INI|cut -d "-" -f 1)
	    MES=$(echo $DT_INI|cut -d "-" -f 2)
	    ANO="20$(echo $DT_INI|cut -d "-" -f 3)"
	    DT_INI=$(DIALOG \
		--calendar "Entre com a nova data início:" 0 0 \
		$DIA $MES $ANO)
    	    cancela	    
	    DT_INI=$(echo $DT_INI | sed 's|/|-|g' | cut -c 1-6,8,10)
	    
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    visualiza
	    ;;
        5)
	    DIA=$(echo $DT_TER|cut -d "-" -f 1)
	    MES=$(echo $DT_TER|cut -d "-" -f 2)
	    ANO="20$(echo $DT_TER|cut -d "-" -f 3)"
	    
	    DT_TER=$(DIALOG \
		--calendar "Entre com a nova data de término:" 0 0 \
		$DIA $MES $ANO)
	    cancela
	    DT_TER=$(echo $DT_TER | sed 's|/|-|g' | cut -c 1-6,8,10)
	    
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    visualiza
	    ;;
        6)
	    DT_ACE=$(DIALOG \
		--checklist "Selecione os dias da semana para acesso:" 0 0 0 \
		1 Segunda $([ $(echo $DT_ACE | grep 1) ] && echo on || echo off) \
		2 Terça $([ $(echo $DT_ACE | grep 2) ] && echo on || echo off) \
		3 Quarta $([ $(echo $DT_ACE | grep 3) ] && echo on || echo off) \
		4 Quinta $([ $(echo $DT_ACE | grep 4) ] && echo on || echo off) \
		5 Sexta $([ $(echo $DT_ACE | grep 5) ] && echo on || echo off) \
		6 Sábado $([ $(echo $DT_ACE | grep 6) ] && echo on || echo off) \
		7 Domingo $([ $(echo $DT_ACE | grep 7) ] && echo on || echo off) )
	    
	    cancela
	    DT_ACE=$(echo $DT_ACE | sed 's/"//g' | sed 's/ /-/g')
	    
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    visualiza
	    ;;
        7)
	    HR_INI=$(DIALOG \
		--timebox "Altere o horário inicial (somente campo hora)" 0 50 \
		$HR_INI 0 0)
	    cancela
	    HR_INI=$(echo $HR_INI| cut -d: -f1)
	    
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    sleep 3
	    visualiza
	    ;;
        8)
	    HR_TER=$(DIALOG \
		--timebox "Altere o horário final (somente campo hora)" 0 50 \
		$HR_TER 0 0)
	    cancela
	    HR_TER=$(echo $HR_TER| cut -d: -f1)
	    
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    visualiza
	    ;;
        9)
	    DATA_USR[9]=$(DIALOG \
		--radiolist "Selecione o status da Virtual Machine do usuário:" 0 0 0 \
		0 Ativa $([ ${DATA_USR[9]} -eq 0 ] && echo on || echo off) \
		1 Desativa $([ ${DATA_USR[9]} -eq 1 ] && echo on || echo off) )
	    cancela
	    chfn $USR -o "||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|${DATA_USR[9]}"
	    visualiza
	    ;;
	10)
	    if [ $VM_LINE -eq 1 ]
		then
		# VM On-line (rotina para colocala em mode off-line
		DIALOG \
		    --yesno "Deseja colocar a VM $VER_VM em modo Off-line?" 0 0
		case $? in
		    0)
			xm shutdown $VER_VM
			visualiza
			;;
		    1)
			visualiza
			;;
		esac
	    else
		# VM Off-line (informa q não é possível colaca-la em outro modo)
		DIALOG \
		    --msgbox "A VM já está em modo Off-line." 0 0
		visualiza
	    fi
	    ;;
    esac
}

# Funcao de criacao de usuario e VM:

create_xen(){
    FREE_PE=$(vgdisplay | awk '/Free  PE/ {print $7 " " $8}')
    DISP_VM=$[ ( $(echo $FREE_PE | cut -d " " -f 1 | sed 's/\.//;s/,//')0 / 512 ) ]
    if [ $DISP_VM -eq 0 ];
	then
	DIALOG \
	    --msgbox "Nao existe espaco disponivel para criacao de \nnovas Maquinas Virtuais." 0 0
	menu
    else
	USR=1
	create_username(){
	    USR=$(DIALOG \
		--inputbox "Digite o username para o novo usuário:" 0 0 )
	    case $? in
		1) menu
	        ;;
	    esac
        }

        create_vm(){
	    echo "XXX"
	    echo 1
	    echo "Criando senha."
	    echo "XXX"
	    PASS=$(dd if=/dev/random ibs=6 count=1 2>/dev/null | mimencode)
	    
	    echo "XXX"
	    echo 2
	    echo "Criptografando senha."
	    echo "XXX"
	    CRYPT_PASS=$(mkpasswd $PASS)
	    
	    echo "XXX"
	    echo 3
	    echo "Criando conta do usuário."
	    echo "XXX"
	    vm=$(for ((i=1;i<1024;i++))
		do 
		if [ ! $(ls /dev/xen/disk$i 2> /dev/null) ]
		    then
		    echo $i | sed 's/ //g'
		    break
		fi
	    done)
	
	    useradd -c "$NOME,$TURMA,@,xen$vm,||$DT_INI|$DT_TER|$DT_ACE|$HR_INI|$HR_TER|0" -m -g xen -p $CRYPT_PASS -s /bin/xensh $USR
	
	    echo "XXX"
	    echo 4
	    echo "Escrevendo log"
	    echo "XXX"
	    echo -e "$(date +%d/%m/%y) -- $TURMA\t$NOME\t$USR\t$MAIL\txen$vm\t$PASS" >> /var/log/xenprog.log
	    
	    echo "XXX"
	    echo 5
	    echo "Criando VBD LVM."
	    echo "XXX"
	    lvcreate -L512M -n disk$vm xen 2> /dev/null > /dev/null
	
	    echo "XXX"
	    echo 6
	    echo "Criando sistema de arquivos em $XEN_VBD/disk$vm."
	    echo "XXX"
	    mkfs.ext3 $XEN_VBD/disk$vm 2> /dev/null > /dev/null
	
	    echo "XXX"
	    echo 7
	    echo "Montando VBD LVM."
	    echo "XXX"
	    mount $XEN_VBD/disk$vm /mnt/disk  2> /dev/null > /dev/null
	
	    echo "XXX"
	    echo 8
	    echo "Montando disco matriz."
	    echo "XXX"
	    mount $XEN_VBD/disk_orig /mnt/image 2> /dev/null > /dev/null
	
	    echo "XXX"
	    echo 9
	    echo "Criando sistema no novo VBD."
	    echo "XXX"

	    x=$(df -m /mnt/image | awk '/image/{print $2}')
	    y=$(echo "$(echo $x) / 86" | bc -l)
	    df=$(df -m /mnt/disk | awk '/disk/{print $2}')

	    cp -a /mnt/image/* /mnt/disk 2> /dev/null > /dev/null &

	    while [ ${df} -lt 356 ]
		do
	    	df=$(df -m /mnt/disk | awk '/disk/{print $2}')
		barra=$(echo "$(echo $df) / $(echo $y) + 10" | bc -l | cut -d . -f 1)
		echo "XXX"
		echo $barra
            	echo "Criando sistema no novo VBD. Copiado $(echo $df de $x)"
            	echo "XXX"
		sleep 1
            done
	
	    echo "XXX"
	    echo 98
	    echo "Desmontando volumes." 
	    echo "XXX"
	    umount /mnt/image 2> /dev/null > /dev/null
	    umount /mnt/disk 2> /dev/null > /dev/null
	    
	    echo "XXX"
	    echo 99
	    echo "Enviando senha por e-mail para o aluno."
	    echo "XXX"

	    echo -e "
	    Olá $nome

	Você esta cadastrado no sistema HACKERMICRO do HackerTeen.

	Para acessar seu HACKERMICRO, você poderá usar o SSH caso esteja no Linux, ou o PUTTY caso ainda use Windows.

	Para que você tenha acesso seguem as informações Importantes: (Não perca!!!)

	IP do HackerMicro:  201.6.255.3
	Porta de Acesso:    2222
	Login de Acesso:    $USR
	Senha de Acesso:    $PASS 
	
	Login Dentro do HackerMicro: root
	Sua senha de Root:  hackerteen

	-> Acessando o HACKERMICRO pelo Windows:

	Baixe o programinha putty: http://superdownloads.ubbi.com.br/download/i19845.html

	E preencha as informações de IP e Porta para se conectar!

	Caso tenha Dúvidas poderá consultar seu Guia Didático!

	-> Acessando a Máquina  Virtual pelo Linux:

	Execute o comando:  ssh $USR@201.6.255.3  -p 2222 -C

	ATENÇÃO!!! Você deverá trocar sua senha de root logo no primeiro acesso, para sua própria proteção! Para isso execute o comando:

	passwd

	E lembre-se, é obrigatório colocar uma SENHA BEM DIFÍCIL! ;-)

	Dias em que sua máquina estará disponível: $DT_ACE
	(Sendo 1-Segunda, 2-Terça, 3-Quarta, 4-Quinta, 5-Sexta, 6-Sábado e 7-Domingo)

	Horário que sua Máquina Virtual estará disponível: Das $HR_INI:00 às $HR_TER:00

	-> Encerrando uma conexão na Máquina Virtual:

	Para SAIR da Máquina Virtual da maneira correta, basta teclar  Ctrl+]

	Isso mesmo é CTRL + ] (Fecha Colchete!) :-)

	Bom Acesso!

	Equipe HackerTeen" > /tmp/mail.$USR

	    sudo -u contato mail -s "Senha de acesso para o HACKERMICRO - HackerTeen" -b servidorvirtual@4linux.com.br  $MAIL < /tmp/mail.$USR	
	    sudo -u contato mail -s "Senha de acesso para o HACKERMICRO - HackerTeen" -b servidorvirtual@4linux.com.br  $ADM < /tmp/mail.$USR	

	    rm /tmp/mail.$USR

	    echo "XXX"
	    echo 100
	    echo "Finalizado."
	    echo "XXX"
	}
    
	while [ "$USR" = "1" ] || [ $(id $USR 2> /dev/null > /dev/null && echo 1 || echo 0) -eq 1 ] || [ $(echo -n $USR | wc -c) -lt 3 ]
	  do
	  create_username
	done
    
	NOME=$(DIALOG \
	    --inputbox "Nome completo:" 0 0 )
	case $? in
	    1) menu
	    ;;
	esac
    
	MAIL=$(DIALOG \
	    --inputbox "E-mail:" 0 0 )
	case $? in
	    1) menu
	    ;;
	esac
    
	TURMA=$(DIALOG \
	    --inputbox "Turma:" 0 0 $TURMA)
	case $? in
	    1) menu
	    ;;
	esac
    
# Insere Data de inicio
    
    
	DT_INI=$(DIALOG \
	    --calendar "Data de início:" 0 0 $DT_INI_OLD)
	case $? in
	    1) menu
	    ;;
	esac
    
	DT_INI_OLD=$(echo $DT_INI | sed 's|/| |g')
	DT_INI=$(echo $DT_INI | sed 's|/|-|g' | cut -c 1-6,8,10)
    
    
# Insere Data de termino
    
	DT_TER=$(DIALOG \
	    --calendar "Data de término:" 0 0 $DT_TER_OLD)
	case $? in
	    1) menu
	    ;;
	esac
    
	DT_TER_OLD=$(echo $DT_TER | sed 's|/| |g')
	DT_TER=$(echo $DT_TER | sed 's|/|-|g' | cut -c 1-6,8,10)
    
    
# Insere dias da semana de acesso
    
	DT_ACE=$(DIALOG \
	    --checklist "Selecione os dias da semana para acesso:" 0 0 0 \
	    1 Segunda $([ $(echo $DT_ACE | grep 1) ] && echo on || echo off) \
	    2 Terça $([ $(echo $DT_ACE | grep 2) ] && echo on || echo off) \
	    3 Quarta $([ $(echo $DT_ACE | grep 3) ] && echo on || echo off)\
	    4 Quinta $([ $(echo $DT_ACE | grep 4) ] && echo on || echo off) \
	    5 Sexta $([ $(echo $DT_ACE | grep 5) ] && echo on || echo off) \
	    6 Sábado $([ $(echo $DT_ACE | grep 6) ] && echo on || echo off) \
	    7 Domingo $([ $(echo $DT_ACE | grep 7) ] && echo on || echo off) )
	case $? in
	    1) menu
	    ;;
	esac
	
	DT_ACE=$(echo $DT_ACE | sed 's/"//g' | sed 's/ /-/g')
	
	
	HR_INI=$(DIALOG \
	    --timebox "Horário inicial (somente campo hora)" 0 50 $([ ! $HR_INI ] && echo 0 || echo $HR_INI) 0 0) 
	case $? in
	    1) menu
	    ;;
	esac
	
	HR_INI=$(echo $HR_INI| cut -d: -f1)
	
	HR_TER=$(DIALOG \
	    --timebox "Horário final (somente campo hora)" 0 50 $([ ! $HR_TER ] && echo 0 || echo $HR_TER) 0 0)
	case $? in
	    1) menu
	    ;;
	esac
	
	HR_TER=$(echo $HR_TER| cut -d: -f1)
	
	
	DIALOG \
	    --backtitle "As informações estão corretas?" \
	    --yesno "
      Nome completo:    $NOME
      Turma:            $TURMA
      E-mail:           $MAIL
      Data de iníci:    $DT_INI
      Data de termino:  $DT_TER
      Dias de acesso:   $DT_ACE
      Hora inicial:     $HR_INI
      Hora final:       $HR_TER" 0 0
	case $? in
	    0) 
	    create_vm | DIALOG --gauge "Agurde..." 20 70 0
	    DIALOG \
		--ok-label OK \
		--msgbox "Usuário $USR e Maquina Virtual adicionados com sucesso." 0 0
	    case $? in
		*) menu
		;;
	    esac
	    ;;
	    1)
	    create_xen
	    ;;
	esac
    fi
}

list_remove(){
    list=""
    
    for i in $(cat /etc/passwd | grep xensh | sed 's/,/:/g' | cut -d: -f1,8 | sort)
      do
      value=($(echo $i | sed 's/:/ /'))
      list="$list ${value[1]} ${value[0]}"
    done
    
# Exibindo menu com a lista
    VER_VM=$(DIALOG \
	--cancel-label "Menu" \
	--menu "Selecione um usuário/VM para remoção:" 0 0 0 \
	$list)
    
    case $? in
        0) remove
	    ;;
        1) menu
	    ;;
        255) exit 0
	    ;;
    esac
}

remove(){
    USR=$(cat /etc/passwd | grep ",$VER_VM," | cut -d: -f1)
    DIALOG \
	--yesno "Voce selecionou para a para remoção:

Usuário: $USR
Maquina Virtual: $VER_VM

Confirma a remoção?
" 0 0
    case $? in
        0) 
	    atividade=$(xm list | grep $VER_VM 2> /dev/null > /dev/null && echo 0 || echo 1)
	    if [ $atividade -eq 0 ]
		then
		DIALOG \
			--yesno "A Maquina Virtual $VER_VM do usuÃ¡rio $USR estÃ¡ ativa
Destruir a Maquina virtual incondicionalmente?" 0 0
			if [ $? -eq 0 ]
				then
				for pid in $(ps --User $USR)
					do
					kill -9 $pid
				done
				xm destroy $VER_VM
				
			fi
	    fi
	    lvremove -f $XEN_VBD/disk$(echo $VER_VM | cut -d n -f 2 2> /dev/null > /dev/null)
	    deluser $USR 2> /dev/null > /dev/null
	    rm -rf /home/$USR 2> /dev/null > /dev/null

	    DIALOG \
		--ok-label OK \
		--msgbox "Usuario e Virtual Machine removidos com sucesso." 0 0
	    menu
	    ;;
        1) menu
	    ;;
        255) exit 0
	    ;;
    esac
}

list_concerta(){
    list=
    
    for i in $(cat /etc/passwd | grep xensh | sed 's/,/:/g' | cut -d: -f1,8)
      do
      value=($(echo $i | sed 's/:/ /'))
      list="$list ${value[1]} ${value[0]}"
    done
    
# Exibindo menu com a lista
    VER_VM=$(DIALOG \
	--cancel-label "Menu" \
	--menu "Selecione um usuário/VM para conserto:" 0 0 0 \
	$list)
    
    case $? in
        0) concerta
	    ;;
        1) menu
	    ;;
        255) exit 0
	    ;;
    esac
}

concerta(){
    vm=$(echo $VER_VM | cut -d n -f2)
    echo "Reformatando VBD."
    mkfs.ext3 $XEN_VBD/disk$vm 2> /dev/null > /dev/null
    echo "Montando VBD."
    mount $XEN_VBD/disk$vm /mnt/disk  2> /dev/null > /dev/null
    echo "Montando disco matriz."
    mount $XEN_VBD/disk_orig /mnt/image 2> /dev/null > /dev/null
    echo "Criando sistema no VBD."
    cp -a /mnt/image/* /mnt/disk 2> /dev/null > /dev/null
    echo "Desmontando volumes." 
    umount /mnt/image 2> /dev/null > /dev/null
    umount /mnt/disk 2> /dev/null > /dev/null
    
    DIALOG \
	--ok-label Menu \
	--beep \
	--msgbox "Operacao realizada com sucesso." 0 0
    menu   
}

status_menu(){
    
    OPT=$(DIALOG \
	--ok-label "Selecionar" \
	--cancel-label "Menu" \
	--menu "Escolha uma opção:" 0 0 0 \
	1 "Recursos do sistema de VBDs e VMs" \
	2 "Maquinas Virtuais ativas." \
	3 "Sistema de log de acesso por usuário" )
    case $? in
        1)
	    menu
	    ;;
    esac

    case $OPT in
	1) # "Recursos do sistema de VBDs (Virtual Block Devices)"
	    MAX_LV=$(vgdisplay | awk '/MAX LV/ {print $3}')
	    CUR_LV=$(vgdisplay | awk '/Cur LV/ {print $3}')
	    TAM_VG=$(vgdisplay | awk '/VG Size/ {print $3 " " $4}')
	    ALLOC_PE=$(vgdisplay | awk '/Alloc PE/ {print $7 " " $8}')
	    FREE_PE=$(vgdisplay | awk '/Free  PE/ {print $7 " " $8}')

	    CAPVM_T=$[ ( $(echo $TAM_VG | cut -d " " -f 1 | sed 's/\.//;s/,//')0 / 512 - 1 ) ]
	    CAPVM_A=$[ ( $(echo $ALLOC_PE | cut -d " " -f 1 | sed 's/\.//;s/,//')0 / 512 - 1 ) ]
	    DISP_VM=$[ ( $(echo $FREE_PE | cut -d " " -f 1 | sed 's/\.//;s/,//')0 / 512 ) ]

	    MSG=$( echo "
Informações sobre Recursos de Virutal Block Devices em LVM
----------------------------------------------------------
    Capacidade maxima de Volumes Logicos.................: $MAX_LV
    Volumes Logicos alocados no sistema..................: $CUR_LV
    Tamanho total do Grupo de Volume.....................: $TAM_VG
    Espaco alocado no Grupo de Volume....................: $ALLOC_PE
    Espaco disponivel no Grupo de Volume.................: $FREE_PE

Informações sobre Recursos de Maquinas Virutais
----------------------------------------------------------
    Capacidade maxima de Maquinas Virtuais...............: $CAPVM_T
    Capacidade em uso por Maquinas Virutais..............: $CAPVM_A
    Capacidade disponivel para novas Maquinas Virtuais...: $DISP_VM

" | sed 's/Size//')

	    DIALOG \
		--ok-label "Voltar" \
		--backtitle "Informações sobre VBDs e VMs" \
		--msgbox "$MSG" 0 0
	    status_menu
	    ;;

	2) # "Maquinas Virtuais ativas."
	    num=

		vm_enable=$(xm list | awk '/xen/ {print $1}')

		if [ "${vm_enable}" ]
			then
		    for vm_on in ${vm_enable}
		      do
		      let num++
		      user_vm=$(cat /etc/passwd | grep ",$vm_on," | cut -d: -f1)
		      vm_list="$vm_list $vm_on $user_vm"
		    done
	
		    if [ "${num}" ]
				then
				VER_VM=$(DIALOG \
				    --ok-label "Ver info" \
				    --cancel-label "Voltar" \
				    --menu "Para visualizar :" 0 0 0 \
				    $vm_list)
				case $? in
				    0) 
						vm_list=
						visualiza
					;;
				    1) 
						vm_list=
						status_menu
					;;
				esac   
		    else
				DIALOG \
				    --ok-label "Voltar" \
				    --backtitle "Informações sobre VBDs" \
				    --msgbox "$MSG" 0 0		
				status_menu
		    fi
		else
			DIALOG \
			    --ok-label "Voltar" \
			    --backtitle "Informações sobre VBDs" \
			    --msgbox "Nao existe nenhuma Maquina Virtual ativa." 0 0		
		fi
	    num=
		status_menu
	    ;;



	3) # "Sistema de log de acesso por usuário"
	sistlog(){
	    list=
	    for i in $(cat /etc/passwd | grep xensh | sed 's/,/:/g' | cut -d: -f1,8 | sort)
	      do
	      value=($(echo $i | sed 's/:/ /'))
	      list="$list ${value[0]} ${value[1]}"
	    done
	    VER_LOG=$(DIALOG \
		--cancel-label "Menu" \
		--menu "Selecione um usuário para visualização do log:" 0 0 0 \
		$list)
	    case $? in
		0) 
		    last $VER_LOG > /tmp/$VER_LOG.log
		    DIALOG \
			--backtitle "Log do usuário $VER_LOG" \
			--textbox /tmp/$VER_LOG.log 20 60
		    sistlog
			cp /tmp/$VER_LOG.log /tmp/teste.log
		    rm /tmp/$VER_LOG.log
		    ;;
		1) 
		    menu
		    ;;
	    esac
         }
	 sistlog
	 ;;

     esac
     }

menu
